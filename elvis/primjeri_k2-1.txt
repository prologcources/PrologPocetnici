1. Neka je zadana baza znanja:

zaposlenik::osoba.
kupac::osoba.
menadzer::zaposlenik.
direktor::menadzer.

stefica:kupac.
ivek:zaposlenik.
joza:menadzer.
bara:direktor.

ivek[ placa->100 ].
joza[ placa->200 ].
bara[ placa->300 ].

Implementirajte metodu ukupne_place koja će za zadanu klasu vratiti zbroj svih plaća objekata u toj klasi.

Primjeri korištenja:


flora2 ?- osoba[ ukupne_place->?p ].

?p = 600

1 solution(s) in 0.0100 seconds

Yes

flora2 ?- zaposlenik[ ukupne_place->?p ].

?p = 600

1 solution(s) in 0.0000 seconds

Yes

flora2 ?- menadzer[ ukupne_place->?p ].

?p = 500

1 solution(s) in 0.0000 seconds

Yes

flora2 ?- direktor[ ukupne_place->?p ].

?p = 300

1 solution(s) in 0.0000 seconds

Yes



2. Neka je zadana sljedeća baza znanja:

zaposlenik::osoba.
kupac::osoba.
menadzer::zaposlenik.
direktor::menadzer.

stefica:kupac.
ivek:zaposlenik.
joza:menadzer.
bara:direktor.

Implementirajte meta-predikat (naziv/funktor predikata je varijabilan) koji će omogućiti vraćanje liste objekata koji su u klasi zadanom nazivom predikata.

Primjeri korištenja:


flora2 ?- osoba( ?x ).

?x = [bara, ivek, joza, stefica]

1 solution(s) in 0.0100 seconds

Yes

flora2 ?- kupac( ?x ).

?x = [stefica]

1 solution(s) in 0.0000 seconds

Yes

flora2 ?- zaposlenik( ?x ).

?x = [bara, ivek, joza]

1 solution(s) in 0.0000 seconds

Yes

flora2 ?- menadzer( ?x ).

?x = [bara, joza]

1 solution(s) in 0.0000 seconds

Yes

flora2 ?- direktor( ?x ).

?x = [bara]

1 solution(s) in 0.0000 seconds

Yes

flora2 ?-



3. Neka je zadana sljedeća baza znanja u F-logici:

Joza:osoba[ roditelj->{ Stef, Bara }, spol->musko ].
Stef:osoba[ roditelj->{ Stefica, Ivek }, spol->musko ].
Bara:osoba[ roditelj->{ Slavek, Marica }, spol->zensko ].
Ivek:osoba[ spol->musko ].
Stefica:osoba[ spol->zensko ].
Slavek:osoba[ spol->musko ].
Marica:osoba[ spol->zensko ].

Implementirajte metode baka i predak za klasu osoba. Primjeri korištenja:

flora2 ?- ?x[ baka->?y ].

?x = Joza
?y = Marica

?x = Joza
?y = Stefica

2 solution(s) in 0.0000 seconds

Yes

flora2 ?- Joza[ predak->?y ].

?y = Bara

?y = Ivek

?y = Marica

?y = Slavek

?y = Stef

?y = Stefica

6 solution(s) in 0.0000 seconds

Yes

flora2 ?-


4. Implementirajte sljedeći UML dijagram u F-logici:

http://arka.foi.hr/~mschatten/lp/uml_manageri.png

Metoda podređeni prima naziv odjela i vraća listu podređenih datog menadžera.

Primjerice neka je zadana sljedeća baza znanja:


ivek:zaposlenik[ ime->Ivan, prezime->Presvetli, nadredjeni->bara, odjel->Marketing ].
joza:zaposlenik[ ime->Josip, prezime->Prikratki, nadredjeni->bara, odjel->Marketing ].
bara:menadzer[ ime->Barica, prezime->Jambrek ].


Tada će se program ponašati na sljedeći način:


flora2 ?- bara[ podredjeni( Marketing ) -> ?x ].

?x = [ivek, joza]

1 solution(s) in 0.0000 seconds

Yes


5. Implementirajte gramatiku koja će prepoznavati izraze zbrajanja i oduzimanja dvaju brojeva te konstruirati odgovarajuće stablo sintakse.

| ?- izraz( X, [ 2.1, '-', 55 ], [] ).

X = izraz(prvi(2.1000),operator(-),drugi(55))
no
| ?- izraz( X, [ 17, '+', 22.43 ], [] ).

X = izraz(prvi(17),operator(+),drugi(22.4300));

no



6. Neka je zadana sljedeća baza činjenica:

osoba( ivek ).
osoba( joza ).
osoba( bara ).

Implementirajte gramatiku koja će prepoznavati i konstruirati parove osoba.

Primjer korištenja:

| ?- par( X, [ joza, i, bara ], [] ).

X = par(joza,i,bara);

no
| ?- par( X, Y, [] ).

X = par(ivek,i,ivek)
Y = [ivek,i,ivek];

X = par(ivek,i,joza)
Y = [ivek,i,joza];

X = par(ivek,i,bara)
Y = [ivek,i,bara];

X = par(joza,i,ivek)
Y = [joza,i,ivek];

X = par(joza,i,joza)
Y = [joza,i,joza];

X = par(joza,i,bara)
Y = [joza,i,bara];

X = par(bara,i,ivek)
Y = [bara,i,ivek];

X = par(bara,i,joza)
Y = [bara,i,joza];

X = par(bara,i,bara)
Y = [bara,i,bara];

no


7. Implementirajte gramatiku koja će prepoznavati jednostavne rečenice oblika:

subjekt predikat objekt.

Subjekti mogu biti:
- Ivek
- Stef
- Bara

Predikati mogu biti
- voli
- jede
- gleda

Objekti mogu biti
- sladoled
- kobasice

Primjer korištenja:
| ?- recenica( X, Y, [] ).

X = recenica(subjekt(Ivek),predikat(voli),objekt(sladoled))
Y = [Ivek,voli,sladoled];

X = recenica(subjekt(Ivek),predikat(voli),objekt(kobasice))
Y = [Ivek,voli,kobasice];

X = recenica(subjekt(Ivek),predikat(jede),objekt(sladoled))
Y = [Ivek,jede,sladoled];

X = recenica(subjekt(Ivek),predikat(jede),objekt(kobasice))
Y = [Ivek,jede,kobasice];

X = recenica(subjekt(Ivek),predikat(gleda),objekt(sladoled))
Y = [Ivek,gleda,sladoled];

X = recenica(subjekt(Ivek),predikat(gleda),objekt(kobasice))
Y = [Ivek,gleda,kobasice];

X = recenica(subjekt(Stef),predikat(voli),objekt(sladoled))
Y = [Stef,voli,sladoled];

X = recenica(subjekt(Stef),predikat(voli),objekt(kobasice))
Y = [Stef,voli,kobasice];

X = recenica(subjekt(Stef),predikat(jede),objekt(sladoled))
Y = [Stef,jede,sladoled];

X = recenica(subjekt(Stef),predikat(jede),objekt(kobasice))
Y = [Stef,jede,kobasice];

X = recenica(subjekt(Stef),predikat(gleda),objekt(sladoled))
Y = [Stef,gleda,sladoled];

X = recenica(subjekt(Stef),predikat(gleda),objekt(kobasice))
Y = [Stef,gleda,kobasice];

X = recenica(subjekt(Bara),predikat(voli),objekt(sladoled))
Y = [Bara,voli,sladoled];

X = recenica(subjekt(Bara),predikat(voli),objekt(kobasice))
Y = [Bara,voli,kobasice];

X = recenica(subjekt(Bara),predikat(jede),objekt(sladoled))
Y = [Bara,jede,sladoled];

X = recenica(subjekt(Bara),predikat(jede),objekt(kobasice))
Y = [Bara,jede,kobasice];

X = recenica(subjekt(Bara),predikat(gleda),objekt(sladoled))
Y = [Bara,gleda,sladoled];

X = recenica(subjekt(Bara),predikat(gleda),objekt(kobasice))
Y = [Bara,gleda,kobasice];

no
| ?-


8. Implementirajte gramatiku koja koja prepoznaje if-then-else izraze oblika:

if ( izraz )
then { naredbe }
[else { naredbe } ]

(else je opcionalan). Gramatika treba konstruirati stablo sintakse.

Primjeri korištenja:

| ?- selekcija( S, [ if, '(', a, <, b, ')', then, '{', a, +, +, '}' ], [] ).

S = selekcija(if(uvjet([a,<,b])),then(naredbe([a,+,+])));

no
| ?- selekcija( S, [ if, '(', a, ')', then, '{', 'a', -, -, '}', else, '{', a, +, +, '}' ], [] ).

S = selekcija(if(uvjet([a])),then(naredbe([a,-,-])),else(naredbe([a,+,+]))); 

no
| ?-





9. Implementirajte predikat listaj/2 koji će na temelju zadanog naziva direktorija u izlaznoj varijabli vratiti listu običnih (plain) datoteka koje se u njemu nalaze, te promijeniti trenutni direktorij u zadani.

Primjer korištenja:

| ?- listaj( '/home/mschatte/myPackages' , L ).

L = [apache-tomcat-6.0.18.tar.gz,exist.war,install_flash_player_10_linux.deb,openlaszlo.war];

no
| ?- shell( pwd ).
/home/mschatte/myPackages

yes
| ?-


10. Potrebno je implementirati predikat lista_datoteka/2 koji će vratiti sortiranu listu običnih (plain) datoteka u zadanom direktoriju u sljedećem obliku:

[dat( datoteka_1 ), ..., dat( datoteka_n )]

Pri tome se smijete koristiti ugrađenim predikatima.

Primjer korištenja:

| ?- lista_datoteka( '.', L ).

L = [dat(k1.P),dat(k1.P~),dat(k1.xwam)];

no

11. Implementirajte predikat kodiraj/2 koji će listu znakova kodirati klasičnom Cezarovom šifrom s pomakom 1 (svakom kodu slova dodaje se broj 1). Primjer korištenja:


| ?- kodiraj( "kolokvij", X ).

X = lpmplwjk;

Pri implementaciji smiju se koristiti ugrađeni predikati.


12. Implementirajte predikat zamijeni( UlazniNiz, TrazeniNiz, Zamjena, Izlaz ) koji ce primit ulazni niz, pretraziti je li on sadrzi trazeni niz, te ukoliko ga sadrzi zamijeniti ga zamjenom i rezultat vratiti u varijabli izlaz.

Primjer korištenja:

| ?- zamijeni( 'ovo je proba', 'proba', 'uspjeh', X ).

X = ovo je uspjeh;

no
| ?- zamijeni( 'ovo ne prolazi', 'jer trazim svasta', 'nezamjenjivo', X ).

no
| ?-

